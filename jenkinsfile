pipeline {
    agent { label 'slave1' }

    stages {
        stage('Copying the code') {
            steps {
                echo "Copying the code"
                git url: "https://github.com/addico786/django_app.git", branch: "master"
                echo "Code copied successfully"
            }
        }

        stage('Installing Docker') {
            steps {
                echo "Installing Docker"
                sh "curl -LO https://raw.githubusercontent.com/addico786/tools_download_scripts/master/docker.sh"
                sh "chmod +x docker.sh"
                sh "./docker.sh"
                echo "Docker installed successfully"
            }
        }

        stage('Building the code') {
            steps {
                echo "Building the code"
                sh "docker rmi -f my-app:latest || true" # remove the image if it exists
                sh "docker build -t my-app:latest ."
                echo "Code built successfully"
            }
        }

        stage('Pushing to Docker Hub') {
            steps {
                echo "Pushing the code to Docker Hub"
                withCredentials([usernamePassword(
                    credentialsId: "docker-hub-cred",
                    usernameVariable: "dockerhubuser",
                    passwordVariable: "dockerhubPass"
                )]) {
                    sh "docker login -u ${dockerhubuser} -p ${dockerhubPass}"
                    sh "docker image tag my-app:latest ${dockerhubuser}/my-app:latest"
                    sh "docker push ${dockerhubuser}/my-app:latest"
                    echo "Code pushed to Docker Hub successfully"
                }
            }
        }

        stage('Creating Docker network') {
            steps {
                echo "Creating Docker network"
                sh "docker network disconnect my-app-network my-app-container || true" # remove if any running containers 
                sh "docker network disconnect my-app-network nginx-proxy || true" # remove if any running containers
                sh "docker network rm my-app-network || true" # remove the network if it exists
                sh "docker network ls"
                sh "docker network create my-app-network -d bridge"
                echo "Docker network created successfully" 
            }
        }

        stage('Deploying the code on server') {
            steps {
                echo "Deploying the code on server"
                sh "docker network ls"
                sh "docker rm -f my-app-container || true" # remove the container if it exists
                sh "docker run -d -p 8000:8000 --name my-app-container --network my-app-network my-app:latest" #including the container in the network
                sh "docker ps"
                echo "Django app deployed successfully"
            }
        }

        stage('Setting up NGINX, reverse proxy') {
            steps {
                echo "Setting up NGINX as reverse proxy"
                sh "docker rmi -f nginx || true" # remove the image if it exists
                sh "docker build -t nginx ./nginx"
                sh "docker rm -f nginx-proxy || true " # remove the container if it exists
                sh "docker run -d --name nginx-proxy -p 80:80 --network my-app-network nginx" #including the container in the network
                sh "docker ps"
                echo "NGINX reverse proxy started on port 80"    
            }
        }
    }
}
